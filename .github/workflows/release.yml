name: Release

on:
  push:
    tags:
      - '*'

jobs:
  build:
    name: Create Release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12"]  # PYTHON VERSION
        os: [windows-latest]
        hardware: ["cpu", "cuda"]
    timeout-minutes: 60
    steps:
    - name: Set env
      shell: bash
      run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
    - uses: actions/checkout@main
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@main
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install torch with CPU support
      if: matrix.hardware == 'cpu'
      run: |
        pip install torch==2.3.1+cpu torchvision==0.18.1+cpu -f https://download.pytorch.org/whl/torch_stable.html
    - name: Install torch with CPU support
      if: matrix.hardware == 'cuda'
      run: |
        pip install torch torchvision --index-url https://download.pytorch.org/whl/cu121
    - name: Build windows executables
      shell: bash
      run: ./win_build.sh
    - name: Upload windows executables
      id: uploadBinaryArtifact
      uses: actions/upload-artifact@v4.4.3
      with:
        name: dctools-executables
        path: ./dist/DC-tools-for-Windows/*.exe
    - name: Remove unsigned windows binaries
      shell: bash
      run: |
        rm ./dist/DC-tools-for-Windows/*.exe
    - name: Sign Windows executable
      uses: signpath/github-action-submit-signing-request@v1
      with:
        api-token: '${{ secrets.SIGNPATH_API_TOKEN }}'
        organization-id: '7a6567fe-80c6-4172-a51f-3e7d8004f7cd'
        project-slug: 'DC-tools-for-Windows.git'
        signing-policy-slug: 'release-signing'
        github-artifact-id: '${{steps.uploadBinaryArtifact.outputs.artifact-id}}'
        wait-for-completion: true
        output-artifact-directory: 'dist/DC-tools-for-Windows'
        parameters: |
          Version: "${{ env.RELEASE_VERSION }}"
    - name: Create Windows installer
      shell: bash
      run: ./win_package.sh
    - name: Upload windows installer
      id: uploadInstallerArtifact
      uses: actions/upload-artifact@v4.4.3
      with:
        name: dctools-installer
        path: ./innosetup/Output/*.exe
    - name: Remove unsigned windows installer
      shell: bash
      run: |
        rm -rf ./innosetup/Output/*.exe
    - name: Sign Windows installer
      uses: signpath/github-action-submit-signing-request@v1
      with:
        api-token: '${{ secrets.SIGNPATH_API_TOKEN }}'
        organization-id: '7a6567fe-80c6-4172-a51f-3e7d8004f7cd'
        project-slug: 'DC-tools-for-Windows.git'
        signing-policy-slug: 'release-signing'
        github-artifact-id: '${{steps.uploadInstallerArtifact.outputs.artifact-id}}'
        wait-for-completion: true
        output-artifact-directory: 'innosetup/Output'
        parameters: |
          Version: "${{ env.RELEASE_VERSION }}"
    - name: Add "_CUDA" to installer name
      if: matrix.hardware == 'cuda'
      run: |
        $files = Get-ChildItem -Path .\innosetup\Output\ -Filter *.exe
        foreach ($file in $files) {
          Rename-Item -Path $file.FullName -NewName ($file.BaseName + "_CUDA" + $file.Extension)
          Write-Host "Renamed $file.BaseName to $file.BaseName_CUDA$file.Extension"
        }
    - name: Release Assets
      uses: softprops/action-gh-release@v1
      with:
        name: DC tools for Windows ${{ env.RELEASE_VERSION }}
        draft: true
        prerelease: false
        body: |
            ![](https://img.shields.io/github/downloads/DC-Analysis/DC-tools-for-Windows/${{ env.RELEASE_VERSION }}/total.svg)

            This installer and the executables therein are signed: [Code Signing Policy](https://github.com/DC-analysis/DC-tools-for-Windows#code-signing-policy).

        files: |
          ./innosetup/Output/*.exe
